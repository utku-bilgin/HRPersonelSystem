// <auto-generated />
using System;
using HRPersonnelSystem.DAL.Concrete.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HRPersonnelSystem.DAL.Migrations
{
    [DbContext(typeof(PersonnelSystemDbContext))]
    [Migration("20231018172810_AddUserRoles")]
    partial class AddUserRoles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HRPersonnelSystem.Entities.AdvancePayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdvancePaymentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyUnit")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfReply")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Explain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("AdvancePayment");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f8bd10ce-80d7-4211-9893-a943cb333338"),
                            AdvancePaymentType = "Bireysel",
                            Amount = 5000m,
                            ApprovalStatus = 2,
                            CreatedDate = new DateTime(2023, 10, 18, 20, 28, 8, 772, DateTimeKind.Local).AddTicks(3040),
                            CurrencyUnit = 2,
                            EmployeeId = new Guid("7db5918a-64b7-4d74-8d16-bb52fa969631"),
                            Explain = "",
                            IsDeleted = false,
                            RequestDate = new DateTime(2023, 10, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HRPersonnelSystem.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cba7d3c3-51e2-4694-9003-4177b2c43808"),
                            ConcurrencyStamp = "96ad3314-c99f-4c24-bb9d-9f7f54157f1f",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = new Guid("b452c8e5-2d3c-4806-94b1-ad8e464ddbfe"),
                            ConcurrencyStamp = "16d3ffcf-3b19-40a0-bfd4-e324d2a6be6e",
                            Name = "CompanyDirector",
                            NormalizedName = "COMPANYDIRECTOR"
                        },
                        new
                        {
                            Id = new Guid("2a56646d-1ce3-452c-9aee-f64cef46892a"),
                            ConcurrencyStamp = "a00a25e8-9f1c-45e6-b764-92d915a066b2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("HRPersonnelSystem.Entities.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("HRPersonnelSystem.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("AppUser");
                });

            modelBuilder.Entity("HRPersonnelSystem.Entities.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("HRPersonnelSystem.Entities.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("HRPersonnelSystem.Entities.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("7db5918a-64b7-4d74-8d16-bb52fa969631"),
                            RoleId = new Guid("cba7d3c3-51e2-4694-9003-4177b2c43808")
                        },
                        new
                        {
                            UserId = new Guid("fb944ae2-e89b-4f8e-b17b-b7fe1ece2ead"),
                            RoleId = new Guid("b452c8e5-2d3c-4806-94b1-ad8e464ddbfe")
                        },
                        new
                        {
                            UserId = new Guid("d6aab0eb-0052-48bd-a830-37a8e5e67f86"),
                            RoleId = new Guid("2a56646d-1ce3-452c-9aee-f64cef46892a")
                        },
                        new
                        {
                            UserId = new Guid("b7acc710-c1b9-4ae4-9a6b-efda8160cf4f"),
                            RoleId = new Guid("cba7d3c3-51e2-4694-9003-4177b2c43808")
                        },
                        new
                        {
                            UserId = new Guid("0575fc0a-fb5c-42c3-ae76-8cd847642ef3"),
                            RoleId = new Guid("cba7d3c3-51e2-4694-9003-4177b2c43808")
                        },
                        new
                        {
                            UserId = new Guid("0575fc0a-fb5c-42c3-ae76-8cd847642ef3"),
                            RoleId = new Guid("b452c8e5-2d3c-4806-94b1-ad8e464ddbfe")
                        });
                });

            modelBuilder.Entity("HRPersonnelSystem.Entities.AppUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HRPersonnelSystem.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ContractEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ContractStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MersisNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfEmployees")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxOffice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("YearOfEstablishment")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c026bc4-e4d4-44fd-b210-02e7a6a172c9"),
                            Address = "Küçükyali merkez mh. oniki sk. No : 14 Ayazağa Plaza. Sarıyer / Istanbul",
                            CompanyName = "BilgeAdam Teknoloji",
                            CompanyTitle = "LTD.ŞTI.",
                            ContractEndDate = new DateTime(2025, 10, 18, 20, 28, 8, 805, DateTimeKind.Local).AddTicks(3054),
                            ContractStartDate = new DateTime(2023, 2, 18, 20, 28, 8, 805, DateTimeKind.Local).AddTicks(3049),
                            CreatedBy = "Admin",
                            CreatedDate = new DateTime(2023, 10, 18, 20, 28, 8, 805, DateTimeKind.Local).AddTicks(3026),
                            Email = "info@bilgeadam.com",
                            ImagePath = "indir.png",
                            IsActive = true,
                            IsDeleted = false,
                            MersisNumber = "0470000911900015",
                            NumberOfEmployees = 88,
                            Phone = "0212 473 88 88",
                            TaxNumber = "4700009119",
                            TaxOffice = "Aksaray V.D",
                            YearOfEstablishment = new DateTime(1998, 10, 18, 20, 28, 8, 805, DateTimeKind.Local).AddTicks(3044)
                        },
                        new
                        {
                            Id = new Guid("4f7f3b0e-0f1b-4c25-9fe8-79dfed7c3602"),
                            Address = "Büyükyali merkez mh. onbir sk. No : 20 Saat Plaza. Çekmeköy / Istanbul",
                            CompanyName = "Dijital Teknoloji",
                            CompanyTitle = "LTD.ŞTI.",
                            ContractEndDate = new DateTime(2024, 10, 18, 20, 28, 8, 805, DateTimeKind.Local).AddTicks(3107),
                            ContractStartDate = new DateTime(2023, 9, 18, 20, 28, 8, 805, DateTimeKind.Local).AddTicks(3105),
                            CreatedBy = "Admin",
                            CreatedDate = new DateTime(2023, 10, 18, 20, 28, 8, 805, DateTimeKind.Local).AddTicks(3096),
                            Email = "info@dijitalteknoloji.com",
                            ImagePath = "Dijital.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            MersisNumber = "0490000911900015",
                            NumberOfEmployees = 20,
                            Phone = "0212 473 99 99",
                            TaxNumber = "4900009119",
                            TaxOffice = "Aksaray V.D",
                            YearOfEstablishment = new DateTime(2018, 10, 18, 20, 28, 8, 805, DateTimeKind.Local).AddTicks(3103)
                        });
                });

            modelBuilder.Entity("HRPersonnelSystem.Entities.Expenditure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrencyUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfReply")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExpenditureType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Expenditure");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3397bff8-1261-4603-8965-9d596246e4b8"),
                            Amount = 800m,
                            ApprovalStatus = "Bekleyen",
                            CreatedDate = new DateTime(2023, 10, 18, 20, 28, 8, 772, DateTimeKind.Local).AddTicks(4244),
                            CurrencyUnit = "TL",
                            EmployeeId = new Guid("7db5918a-64b7-4d74-8d16-bb52fa969631"),
                            ExpenditureType = "Seyahat",
                            IsDeleted = false,
                            RequestDate = new DateTime(2023, 10, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2ffbe4d4-c782-4a19-bd89-0a8624bed3ee"),
                            Amount = 500m,
                            ApprovalStatus = "Reddedildi",
                            CreatedDate = new DateTime(2023, 10, 18, 20, 28, 8, 772, DateTimeKind.Local).AddTicks(4369),
                            CurrencyUnit = "TL",
                            EmployeeId = new Guid("7db5918a-64b7-4d74-8d16-bb52fa969631"),
                            ExpenditureType = "Konaklama",
                            IsDeleted = false,
                            RequestDate = new DateTime(2023, 10, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HRPersonnelSystem.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountOfDay")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfReply")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PermissionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = new Guid("305ef3c8-fc05-46b2-b054-c49ad270be26"),
                            ApprovalStatus = "Bekleyen",
                            CountOfDay = 21,
                            CreatedDate = new DateTime(2023, 10, 18, 20, 28, 8, 805, DateTimeKind.Local).AddTicks(5720),
                            EmployeeId = new Guid("7db5918a-64b7-4d74-8d16-bb52fa969631"),
                            Gender = 1,
                            IsActive = true,
                            IsDeleted = false,
                            PermissionType = "Askerlik",
                            RequestDate = new DateTime(2023, 10, 18, 20, 28, 8, 805, DateTimeKind.Local).AddTicks(5752),
                            StartDate = new DateTime(2023, 11, 7, 20, 28, 8, 805, DateTimeKind.Local).AddTicks(5729)
                        },
                        new
                        {
                            Id = new Guid("230ae8d2-be96-40bf-8639-566de6ba3a73"),
                            ApprovalStatus = "Bekleyen",
                            CountOfDay = 5,
                            CreatedDate = new DateTime(2023, 10, 18, 20, 28, 8, 805, DateTimeKind.Local).AddTicks(5779),
                            EmployeeId = new Guid("7db5918a-64b7-4d74-8d16-bb52fa969631"),
                            Gender = 1,
                            IsActive = true,
                            IsDeleted = false,
                            PermissionType = "Babalık",
                            RequestDate = new DateTime(2024, 1, 16, 20, 28, 8, 805, DateTimeKind.Local).AddTicks(5784),
                            StartDate = new DateTime(2024, 1, 26, 20, 28, 8, 805, DateTimeKind.Local).AddTicks(5782)
                        },
                        new
                        {
                            Id = new Guid("7fe8e741-7e57-41ea-ae05-1697b1c18f77"),
                            ApprovalStatus = "Onaylandı",
                            CountOfDay = 3,
                            CreatedDate = new DateTime(2023, 10, 18, 20, 28, 8, 805, DateTimeKind.Local).AddTicks(5791),
                            EmployeeId = new Guid("7db5918a-64b7-4d74-8d16-bb52fa969631"),
                            Gender = 1,
                            IsActive = true,
                            IsDeleted = false,
                            PermissionType = "Hastalık",
                            RequestDate = new DateTime(2023, 10, 18, 20, 28, 8, 805, DateTimeKind.Local).AddTicks(5795),
                            StartDate = new DateTime(2023, 10, 18, 20, 28, 8, 805, DateTimeKind.Local).AddTicks(5794)
                        },
                        new
                        {
                            Id = new Guid("702dabb3-d6d4-4ec0-a6f1-ae329c81b649"),
                            ApprovalStatus = "Onaylandı",
                            CountOfDay = 3,
                            CreatedDate = new DateTime(2023, 10, 18, 20, 28, 8, 805, DateTimeKind.Local).AddTicks(5802),
                            EmployeeId = new Guid("7db5918a-64b7-4d74-8d16-bb52fa969631"),
                            Gender = 1,
                            IsActive = true,
                            IsDeleted = false,
                            PermissionType = "Evlilik",
                            RequestDate = new DateTime(2024, 8, 13, 20, 28, 8, 805, DateTimeKind.Local).AddTicks(5806),
                            StartDate = new DateTime(2024, 9, 7, 20, 28, 8, 805, DateTimeKind.Local).AddTicks(5805)
                        },
                        new
                        {
                            Id = new Guid("38b5f216-c008-4e81-9cac-337f8ad7e283"),
                            ApprovalStatus = "Reddedildi",
                            CountOfDay = 5,
                            CreatedDate = new DateTime(2023, 10, 18, 20, 28, 8, 805, DateTimeKind.Local).AddTicks(5874),
                            EmployeeId = new Guid("7db5918a-64b7-4d74-8d16-bb52fa969631"),
                            Gender = 1,
                            IsActive = true,
                            IsDeleted = false,
                            PermissionType = "Yıllık",
                            RequestDate = new DateTime(2024, 7, 14, 20, 28, 8, 805, DateTimeKind.Local).AddTicks(5879),
                            StartDate = new DateTime(2024, 7, 19, 20, 28, 8, 805, DateTimeKind.Local).AddTicks(5877)
                        },
                        new
                        {
                            Id = new Guid("736b4a73-d1e5-4c87-80b7-8584824b4e57"),
                            ApprovalStatus = "Reddedildi",
                            CountOfDay = 10,
                            CreatedDate = new DateTime(2023, 10, 18, 20, 28, 8, 805, DateTimeKind.Local).AddTicks(5886),
                            EmployeeId = new Guid("7db5918a-64b7-4d74-8d16-bb52fa969631"),
                            Gender = 1,
                            IsActive = true,
                            IsDeleted = false,
                            PermissionType = "Refakat",
                            RequestDate = new DateTime(2024, 5, 3, 20, 28, 8, 805, DateTimeKind.Local).AddTicks(5892),
                            StartDate = new DateTime(2024, 5, 5, 20, 28, 8, 805, DateTimeKind.Local).AddTicks(5890)
                        });
                });

            modelBuilder.Entity("HRPersonnelSystem.Entities.Admin", b =>
                {
                    b.HasBaseType("HRPersonnelSystem.Entities.AppUser");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfHire")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfTermination")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<string>("SecondLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TCNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d6aab0eb-0052-48bd-a830-37a8e5e67f86"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cda878d0-54cc-44c0-9fb7-4570b693121f",
                            Email = "erden.timur@bilgeadam.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ERDEN.TIMUR@BILGEADAM.COM",
                            NormalizedUserName = "ERDEN.TIMUR@BILGEADAM.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBK5eQC9FdJ1D5CAQBdiNVH3w40Jj2ZzPrWD++T9aBL57BeJRbSG+Hc3Eby8g3y3qQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "1",
                            TwoFactorEnabled = false,
                            UserName = "erden.timur@bilgeadam.com",
                            Address = "Okul yolu sok. Zincertepe Apt. Bostancı / İstanbul",
                            BirthDate = new DateTime(1985, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlace = "Dolmabahçe",
                            CompanyName = "BilgeAdam",
                            DateOfHire = new DateTime(2023, 10, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Software",
                            FirstName = "Erden",
                            Gender = 1,
                            ImagePath = "ErdenTimur.jpeg",
                            IsActive = true,
                            Job = "Admin",
                            LastName = "Timur",
                            Salary = 45000.0,
                            TCNumber = "12345678900"
                        });
                });

            modelBuilder.Entity("HRPersonnelSystem.Entities.CompanyDirector", b =>
                {
                    b.HasBaseType("HRPersonnelSystem.Entities.AppUser");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CompanyDirector_Address");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CompanyDirector_BirthDate");

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CompanyDirector_BirthPlace");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfHire")
                        .HasColumnType("datetime2")
                        .HasColumnName("CompanyDirector_DateOfHire");

                    b.Property<DateTime?>("DateOfTermination")
                        .HasColumnType("datetime2")
                        .HasColumnName("CompanyDirector_DateOfTermination");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CompanyDirector_Department");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CompanyDirector_FirstName");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("CompanyDirector_Gender");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CompanyDirector_ImagePath");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("CompanyDirector_IsActive");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CompanyDirector_Job");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CompanyDirector_LastName");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CompanyDirector_MiddleName");

                    b.Property<double>("Salary")
                        .HasColumnType("float")
                        .HasColumnName("CompanyDirector_Salary");

                    b.Property<string>("SecondLastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CompanyDirector_SecondLastName");

                    b.Property<string>("TCNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CompanyDirector_TCNumber");

                    b.HasIndex("CompanyId");

                    b.HasDiscriminator().HasValue("CompanyDirector");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fb944ae2-e89b-4f8e-b17b-b7fe1ece2ead"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7558e84d-b2e5-4651-9645-fd8df181082d",
                            Email = "gizem.altin@bilgeadamboost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GIZEM.ALTIN@BILGEADAMBOOST.COM",
                            NormalizedUserName = "GIZEM.ALTIN@BILGEADAMBOOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJP02qo1Y3XoPeBhTWuNvTnRqOl3xJk4HBjt1CyTjGh7nU6yhMTItmbx8Ubyt/RkyA==",
                            PhoneNumber = "0522222222",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "1",
                            TwoFactorEnabled = false,
                            UserName = "gizem.altin@bilgeadamboost.com",
                            Address = "Süründere Mah. Orkun Sok. No:55 Kızılay/Ankara",
                            BirthDate = new DateTime(1991, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlace = "Ankara",
                            CompanyId = new Guid("0c026bc4-e4d4-44fd-b210-02e7a6a172c9"),
                            DateOfHire = new DateTime(2023, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Bilişim Teknojileri",
                            FirstName = "Gizem",
                            Gender = 0,
                            ImagePath = "Gamze.jpg",
                            IsActive = true,
                            Job = "Ekip Lideri",
                            LastName = "Altın",
                            Salary = 47000.0,
                            TCNumber = "12345678911"
                        },
                        new
                        {
                            Id = new Guid("a7a6ea39-8204-4afe-9253-b44124605f1c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5478defd-d923-4719-904a-17a743dfea60",
                            Email = "seyma.acik@bilgeadamboost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SEYMA.ACIK@BILGEADAMBOOST.COM",
                            NormalizedUserName = "SEYMA.ACIK@BILGEADAMBOOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKz+FOyO99mnaZJPZXxV61LjODz9dsHAF8eNH8Eiz1OfDeLluKPnfO40d2RVhj6Ahg==",
                            PhoneNumber = "0522222200",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "1",
                            TwoFactorEnabled = false,
                            UserName = "seyma.acik@bilgeadamboost.com",
                            Address = "Pusula Mah. Çıkmaz Sok. No:18 Kızılay/Ankara",
                            BirthDate = new DateTime(1978, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlace = "Hakkari",
                            CompanyId = new Guid("4f7f3b0e-0f1b-4c25-9fe8-79dfed7c3602"),
                            DateOfHire = new DateTime(2011, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Bilişim Teknojileri",
                            FirstName = "Şeyma",
                            Gender = 0,
                            ImagePath = "Seyma.jpg",
                            IsActive = true,
                            Job = "Ekip Lideri",
                            LastName = "Açık",
                            Salary = 51000.0,
                            TCNumber = "12345678919"
                        });
                });

            modelBuilder.Entity("HRPersonnelSystem.Entities.Employee", b =>
                {
                    b.HasBaseType("HRPersonnelSystem.Entities.AppUser");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Employee_Address");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("Employee_BirthDate");

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Employee_BirthPlace");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Employee_CompanyId");

                    b.Property<DateTime>("DateOfHire")
                        .HasColumnType("datetime2")
                        .HasColumnName("Employee_DateOfHire");

                    b.Property<DateTime?>("DateOfTermination")
                        .HasColumnType("datetime2")
                        .HasColumnName("Employee_DateOfTermination");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Employee_Department");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Employee_FirstName");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("Employee_Gender");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Employee_ImagePath");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("Employee_IsActive");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Employee_Job");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Employee_LastName");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Employee_MiddleName");

                    b.Property<double>("Salary")
                        .HasColumnType("float")
                        .HasColumnName("Employee_Salary");

                    b.Property<string>("SecondLastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Employee_SecondLastName");

                    b.Property<string>("TCNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Employee_TCNumber");

                    b.HasIndex("CompanyId");

                    b.HasDiscriminator().HasValue("Employee");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7db5918a-64b7-4d74-8d16-bb52fa969631"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e8f62583-4649-421a-b1e2-4ca64b9e9518",
                            Email = "burak.pekmez@bilgeadamboost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BURAK.PEKMEZ@BILGEADAMBOOST.COM",
                            NormalizedUserName = "BURAK.PEKMEZ@BILGEADAMBOOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKhdH027KUnQuMrpLDDXZo2ekffJmbmD61Iq7BwZNYwEGh/A9iffxuoz3xit2lJxLg==",
                            PhoneNumber = "055555555",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "1",
                            TwoFactorEnabled = false,
                            UserName = "burak.pekmez@bilgeadamboost.com",
                            Address = " BilgeAdam Kadıköy. Adres. Caferağa Mah. Mühürdar Cad. No:76 Kadıköy / İSTANBUL​",
                            BirthDate = new DateTime(1998, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlace = "Bakırköy",
                            CompanyId = new Guid("0c026bc4-e4d4-44fd-b210-02e7a6a172c9"),
                            DateOfHire = new DateTime(2023, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Software",
                            FirstName = "Burak",
                            Gender = 1,
                            ImagePath = "Burak.jpg",
                            IsActive = true,
                            Job = "Developer",
                            LastName = "Pekmez",
                            Salary = 23000.0,
                            TCNumber = "12345678910"
                        },
                        new
                        {
                            Id = new Guid("b7acc710-c1b9-4ae4-9a6b-efda8160cf4f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4189a7c3-e7b5-494e-9c2d-b26b7f12f361",
                            Email = "hande.pekmez@bilgeadamboost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HANDE.PEKMEZ@BILGEADAMBOOST.COM",
                            NormalizedUserName = "HANDE.PEKMEZ@BILGEADAMBOOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIpu18BsLQNDSav05/KVD1r1b1gtcZ8pY3V0qCDtHa+s9coyvPyB3D0MjCvTaFzNbA==",
                            PhoneNumber = "05001905222",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "1",
                            TwoFactorEnabled = false,
                            UserName = "hande.pekmez@bilgeadamboost.com",
                            Address = " BilgeAdam Kadıköy. Adres. Caferağa Mah. Mühürdar Cad. No:76 Kadıköy / İSTANBUL​",
                            BirthDate = new DateTime(1997, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlace = "Tuzla",
                            CompanyId = new Guid("0c026bc4-e4d4-44fd-b210-02e7a6a172c9"),
                            DateOfHire = new DateTime(2021, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Software",
                            FirstName = "Hande",
                            Gender = 0,
                            ImagePath = "Hande.jpg",
                            IsActive = true,
                            Job = "Developer",
                            LastName = "Pekmez",
                            Salary = 32000.0,
                            TCNumber = "92345678910"
                        },
                        new
                        {
                            Id = new Guid("0575fc0a-fb5c-42c3-ae76-8cd847642ef3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1fd278ea-ce73-476c-aeac-378e4b4927d8",
                            Email = "sinem.unal@bilgeadamboost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SINEM.UNAL@BILGEADAMBOOST.COM",
                            NormalizedUserName = "SINEM.UNAL@BILGEADAMBOOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAFP1mjyMkTndZce3Teo5PPUDLCqUiLEzmYbyXroZW8i+YSEa4hRTQct/hGUlp2YCw==",
                            PhoneNumber = "05001905122",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "1",
                            TwoFactorEnabled = false,
                            UserName = "sinem.unal@bilgeadamboost.com",
                            Address = " BilgeAdam Kadıköy. Adres. Caferağa Mah. Mühürdar Cad. No:76 Kadıköy / İSTANBUL​",
                            BirthDate = new DateTime(1994, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlace = "İzmir",
                            CompanyId = new Guid("0c026bc4-e4d4-44fd-b210-02e7a6a172c9"),
                            DateOfHire = new DateTime(2019, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Department = "Software",
                            FirstName = "Sinem",
                            Gender = 0,
                            ImagePath = "Sinem.jpg",
                            IsActive = true,
                            Job = "Developer",
                            LastName = "Ünal",
                            Salary = 37000.0,
                            TCNumber = "92345678919"
                        });
                });

            modelBuilder.Entity("HRPersonnelSystem.Entities.AdvancePayment", b =>
                {
                    b.HasOne("HRPersonnelSystem.Entities.Employee", "Employee")
                        .WithMany("AdvancePayments")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRPersonnelSystem.Entities.AppRoleClaim", b =>
                {
                    b.HasOne("HRPersonnelSystem.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HRPersonnelSystem.Entities.AppUserClaim", b =>
                {
                    b.HasOne("HRPersonnelSystem.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HRPersonnelSystem.Entities.AppUserLogin", b =>
                {
                    b.HasOne("HRPersonnelSystem.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HRPersonnelSystem.Entities.AppUserRole", b =>
                {
                    b.HasOne("HRPersonnelSystem.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRPersonnelSystem.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HRPersonnelSystem.Entities.AppUserToken", b =>
                {
                    b.HasOne("HRPersonnelSystem.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HRPersonnelSystem.Entities.Expenditure", b =>
                {
                    b.HasOne("HRPersonnelSystem.Entities.Employee", "Employee")
                        .WithMany("Expenditures")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRPersonnelSystem.Entities.Permission", b =>
                {
                    b.HasOne("HRPersonnelSystem.Entities.Employee", "Employee")
                        .WithMany("Permissions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRPersonnelSystem.Entities.CompanyDirector", b =>
                {
                    b.HasOne("HRPersonnelSystem.Entities.Company", "Company")
                        .WithMany("CompanyDirectors")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HRPersonnelSystem.Entities.Employee", b =>
                {
                    b.HasOne("HRPersonnelSystem.Entities.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HRPersonnelSystem.Entities.Company", b =>
                {
                    b.Navigation("CompanyDirectors");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("HRPersonnelSystem.Entities.Employee", b =>
                {
                    b.Navigation("AdvancePayments");

                    b.Navigation("Expenditures");

                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
